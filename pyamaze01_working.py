# pyamaze ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ§Ïπò ÌïÑÏöî: pip install pyamaze
from pyamaze import maze, agent, COLOR
import time

MAZE_ROWS = 10
MAZE_COLS = 10

def truly_working_maze_solver(maze_obj):
    """Ïû¨Í∑Ä DFS Î∞±Ìä∏ÎûòÌÇπ"""
    start = (maze_obj.rows, maze_obj.cols)
    goal = (1, 1)
    
    directions = {
        'E': (0, 1), 'W': (0, -1), 'S': (1, 0), 'N': (-1, 0)
    }
    
    def get_neighbors(pos):
        neighbors = []
        for direction, (dr, dc) in directions.items():
            if pos in maze_obj.maze_map and maze_obj.maze_map[pos][direction] == 1:
                next_pos = (pos[0] + dr, pos[1] + dc)
                if (1 <= next_pos[0] <= maze_obj.rows and 
                    1 <= next_pos[1] <= maze_obj.cols):
                    neighbors.append(next_pos)
        return neighbors
    
    def manhattan_distance(pos1, pos2):
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])
    
    def dfs_solve(current_pos, path, visited):
        if current_pos == goal:
            return True
        
        visited.add(current_pos)
        
        neighbors = get_neighbors(current_pos)
        unvisited_neighbors = [n for n in neighbors if n not in visited]
        unvisited_neighbors.sort(key=lambda x: manhattan_distance(x, goal))
        
        for next_pos in unvisited_neighbors:
            path[current_pos] = next_pos
            
            if dfs_solve(next_pos, path, visited):
                return True
            
            if current_pos in path:
                del path[current_pos]
        
        visited.remove(current_pos)
        return False
    
    print(f"Ïû¨Í∑Ä DFS Î∞±Ìä∏ÎûòÌÇπ Ïã§Ìñâ...")
    start_time = time.time()
    path = {}
    visited = set()
    
    success = dfs_solve(start, path, visited)
    total_time = time.time() - start_time
    
    if success:
        print(f"üéâ Ïû¨Í∑Ä DFS ÏÑ±Í≥µ! ({len(path)}Îã®Í≥Ñ, {total_time:.3f}Ï¥à)")
        return path, True
    else:
        print(f"‚ùå Ïû¨Í∑Ä DFS Ïã§Ìå®! ({total_time:.3f}Ï¥à)")
        return {}, False

def iterative_backtracking_solver(maze_obj):
    """Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ"""
    start = (maze_obj.rows, maze_obj.cols)
    goal = (1, 1)
    
    directions = {
        'E': (0, 1), 'W': (0, -1), 'S': (1, 0), 'N': (-1, 0)
    }
    
    def get_neighbors(pos):
        neighbors = []
        for direction, (dr, dc) in directions.items():
            if pos in maze_obj.maze_map and maze_obj.maze_map[pos][direction] == 1:
                next_pos = (pos[0] + dr, pos[1] + dc)
                if (1 <= next_pos[0] <= maze_obj.rows and 
                    1 <= next_pos[1] <= maze_obj.cols):
                    neighbors.append(next_pos)
        return neighbors
    
    def manhattan_distance(pos1, pos2):
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])
    
    print(f"Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ Ïã§Ìñâ...")
    start_time = time.time()
    
    stack = [(start, {}, set([start]))]
    step_count = 0
    max_steps = MAZE_ROWS * MAZE_COLS * 50
    
    while stack and step_count < max_steps:
        current_pos, current_path, current_visited = stack.pop()
        step_count += 1
        
        if current_pos == goal:
            total_time = time.time() - start_time
            print(f"üéâ Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ ÏÑ±Í≥µ! ({len(current_path)}Îã®Í≥Ñ, {step_count}Ìöå ÏãúÎèÑ, {total_time:.3f}Ï¥à)")
            return current_path, True
        
        neighbors = get_neighbors(current_pos)
        unvisited_neighbors = [n for n in neighbors if n not in current_visited]
        unvisited_neighbors.sort(key=lambda x: manhattan_distance(x, goal), reverse=True)
        
        for next_pos in unvisited_neighbors:
            new_path = current_path.copy()
            new_path[current_pos] = next_pos
            new_visited = current_visited.copy()
            new_visited.add(next_pos)
            stack.append((next_pos, new_path, new_visited))
    
    total_time = time.time() - start_time
    print(f"‚ùå Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ Ïã§Ìå®! ({step_count}Ìöå ÏãúÎèÑ, {total_time:.3f}Ï¥à)")
    return {}, False

def enhanced_greedy_solver(maze_obj):
    """Ìñ•ÏÉÅÎêú Îã®Ïàú ÌÉêÏöï - Ïã§Ìå®Ìï¥ÎèÑ Í≤ΩÎ°ú Î∞òÌôò"""
    start = (maze_obj.rows, maze_obj.cols)
    goal = (1, 1)
    
    directions = {'E': (0, 1), 'W': (0, -1), 'S': (1, 0), 'N': (-1, 0)}
    current_pos = start
    path = {}
    visited = set()
    
    def manhattan_distance(pos1, pos2):
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])
    
    step_count = 0
    max_steps = MAZE_ROWS * MAZE_COLS * 3
    
    print("Ìñ•ÏÉÅÎêú Îã®Ïàú ÌÉêÏöï Ïã§Ìñâ...")
    start_time = time.time()
    
    while current_pos != goal and step_count < max_steps:
        visited.add(current_pos)
        
        possible_moves = []
        for direction, (dr, dc) in directions.items():
            if (current_pos in maze_obj.maze_map and 
                maze_obj.maze_map[current_pos][direction] == 1):
                next_pos = (current_pos[0] + dr, current_pos[1] + dc)
                if (1 <= next_pos[0] <= maze_obj.rows and 
                    1 <= next_pos[1] <= maze_obj.cols and
                    next_pos not in visited):
                    possible_moves.append(next_pos)
        
        if not possible_moves:
            # ÎßâÌòîÏùÑ Îïå: Í∞ÄÏû• Í∞ÄÍπåÏö¥ Î∞©Î¨∏ÌïòÏßÄ ÏïäÏùÄ Í≥≥ Ï∞æÍ∏∞ (Ï†úÌïúÏ†Å Î∞±Ìä∏ÎûòÌÇπ)
            all_moves = []
            for direction, (dr, dc) in directions.items():
                if (current_pos in maze_obj.maze_map and 
                    maze_obj.maze_map[current_pos][direction] == 1):
                    next_pos = (current_pos[0] + dr, current_pos[1] + dc)
                    if (1 <= next_pos[0] <= maze_obj.rows and 
                        1 <= next_pos[1] <= maze_obj.cols):
                        all_moves.append(next_pos)
            
            if not all_moves:
                break
                
            # Î∞©Î¨∏Ìïú Í≥≥Ïù¥ÎùºÎèÑ Î™©ÌëúÏóê Í∞ÄÏû• Í∞ÄÍπåÏö¥ Í≥≥ÏúºÎ°ú
            possible_moves = all_moves
        
        # Î™©ÌëúÏóê Í∞ÄÏû• Í∞ÄÍπåÏö¥ ÏúÑÏπò ÏÑ†ÌÉù
        best_move = min(possible_moves, key=lambda x: manhattan_distance(x, goal))
        path[current_pos] = best_move
        current_pos = best_move
        step_count += 1
    
    total_time = time.time() - start_time
    success = current_pos == goal
    
    if success:
        print(f"üéâ Îã®Ïàú ÌÉêÏöï ÏÑ±Í≥µ! ({step_count}Îã®Í≥Ñ, {total_time:.3f}Ï¥à)")
        print(f"   ÏµúÏ¢Ö ÏúÑÏπò: {current_pos}")
        return path, True
    else:
        print(f"‚ùå Îã®Ïàú ÌÉêÏöï Ïã§Ìå®! ({step_count}Îã®Í≥Ñ, {total_time:.3f}Ï¥à)")
        print(f"   ÏµúÏ¢Ö ÏúÑÏπò: {current_pos} (Î™©Ìëú: {goal})")
        print(f"   ÎèÑÎã¨ Í±∞Î¶¨: {manhattan_distance(current_pos, goal)}Ïπ∏ ÎÇ®Ïùå")
        return path, False  # Ïã§Ìå®Ìï¥ÎèÑ ÏßÄÍ∏àÍπåÏßÄÏùò Í≤ΩÎ°úÎäî Î∞òÌôò!

def main():
    # ÎØ∏Î°ú ÏÉùÏÑ±
    m = maze(MAZE_ROWS, MAZE_COLS)
    m.CreateMaze(loopPercent=0, theme=COLOR.light)
    
    print("=" * 70)
    print("üß† Î™®Îì† ÏïåÍ≥†Î¶¨Ï¶ò ÏãúÎèÑ Í≤∞Í≥º ÎπÑÍµê (Ïã§Ìå®Ìï¥ÎèÑ ÌëúÏãú)")
    print("=" * 70)
    
    # 1. Ïû¨Í∑Ä DFS Î∞±Ìä∏ÎûòÌÇπ
    print("\nüéØ 1. Ïû¨Í∑Ä DFS Î∞±Ìä∏ÎûòÌÇπ:")
    recursive_path, recursive_success = truly_working_maze_solver(m)
    
    # 2. Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ  
    print("\nüîÑ 2. Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ:")
    iterative_path, iterative_success = iterative_backtracking_solver(m)
    
    # 3. Ìñ•ÏÉÅÎêú Îã®Ïàú ÌÉêÏöï
    print("\nüèÉ 3. Ìñ•ÏÉÅÎêú Îã®Ïàú ÌÉêÏöï:")
    greedy_path, greedy_success = enhanced_greedy_solver(m)
    
    print("\n" + "=" * 70)
    print("üìä Í≤∞Í≥º ÎπÑÍµê:")
    print(f"Ïû¨Í∑Ä Î∞±Ìä∏ÎûòÌÇπ:   {len(recursive_path):3d}Îã®Í≥Ñ {'üéâ' if recursive_success else '‚ùå'}")
    print(f"Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ: {len(iterative_path):3d}Îã®Í≥Ñ {'üéâ' if iterative_success else '‚ùå'}")  
    print(f"Îã®Ïàú ÌÉêÏöï:       {len(greedy_path):3d}Îã®Í≥Ñ {'üéâ' if greedy_success else '‚ùå'}")
    
    if hasattr(m, 'path') and m.path:
        print(f"ÏµúÏ†Å Í≤ΩÎ°ú:       {len(m.path):3d}Îã®Í≥Ñ ‚≠ê")
    
    print("\nüé® ÏãúÍ∞ÅÌôî Í≤∞Í≥º:")
    
    # ÏãúÍ∞ÅÌôî - ÏÑ±Í≥µ/Ïã§Ìå® Í¥ÄÍ≥ÑÏóÜÏù¥ Î™®Îì† Í≤ΩÎ°ú ÌëúÏãú
    if recursive_path:
        agent1 = agent(m, footprints=True, color=COLOR.blue, filled=True, shape='arrow')
        m.tracePath({agent1: recursive_path}, delay=20)
        status = "ÏÑ±Í≥µ!" if recursive_success else "Ïã§Ìå®"
        print(f"üîµ ÌååÎûÄ ÌôîÏÇ¥Ìëú: Ïû¨Í∑Ä Î∞±Ìä∏ÎûòÌÇπ ({status})")
    
    if iterative_path:
        agent2 = agent(m, footprints=True, color=COLOR.red, filled=False, shape='square')  
        m.tracePath({agent2: iterative_path}, delay=20)
        status = "ÏÑ±Í≥µ!" if iterative_success else "Ïã§Ìå®"
        print(f"üî¥ Îπ®Í∞Ñ ÏÇ¨Í∞ÅÌòï: Î∞òÎ≥µÎ¨∏ Î∞±Ìä∏ÎûòÌÇπ ({status})")
    
    if greedy_path:  # Ïù¥Ï†ú Ïã§Ìå®Ìï¥ÎèÑ Í≤ΩÎ°úÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú!
        agent3 = agent(m, footprints=True, color=COLOR.cyan, filled=True, shape='square')
        m.tracePath({agent3: greedy_path}, delay=20)
        status = "ÏÑ±Í≥µ!" if greedy_success else "Ïã§Ìå® (Î∂ÄÎ∂Ñ Í≤ΩÎ°ú)"
        print(f"üü¶ Ï≤≠Î°ù ÏÇ¨Í∞ÅÌòï: Îã®Ïàú ÌÉêÏöï ({status})")
    
    if hasattr(m, 'path') and m.path:
        optimal_agent = agent(m, color=COLOR.green, filled=False, shape='square')
        print(f"üü¢ Ï¥àÎ°ù ÏÇ¨Í∞ÅÌòï: ÏµúÏ†Å Í≤ΩÎ°ú")
    
    print(f"\nüí° Ìï¥ÏÑù:")
    print(f"   - Î∞±Ìä∏ÎûòÌÇπ ÏïåÍ≥†Î¶¨Ï¶òÎì§ÏùÄ Ìï¥Í∞Ä ÏûàÏúºÎ©¥ Î∞òÎìúÏãú Ï∞æÏäµÎãàÎã§")
    print(f"   - Îã®Ïàú ÌÉêÏöïÏùÄ Îπ†Î•¥ÏßÄÎßå ÎßâÎã§Î•∏ Í∏∏ÏóêÏÑú Î©àÏ∂ú Ïàò ÏûàÏäµÎãàÎã§")
    print(f"   - Ïã§Ìå®Ìïú Í≤ΩÎ°úÎèÑ 'Ïñ¥ÎîîÍπåÏßÄ Í∞îÎäîÏßÄ' Î≥¥Ïó¨Ï§çÎãàÎã§")
    
    print("\nüéÆ ÎØ∏Î°ú Ïã§Ìñâ Ï§ë... Ï∞ΩÏùÑ Îã´ÏúºÎ©¥ Ï¢ÖÎ£åÎê©ÎãàÎã§.")
    m.run()

if __name__ == "__main__":
    print("üöÄ Î™®Îì† ÏïåÍ≥†Î¶¨Ï¶ò ÏãúÎèÑ Í≤∞Í≥º ÎπÑÍµê!")
    print("=" * 50)
    print("ÏÑ±Í≥µÌïòÎì† Ïã§Ìå®ÌïòÎì† Î™®Îì† Í≤ΩÎ°úÎ•º Î≥¥Ïó¨Ï§çÎãàÎã§!")
    print("=" * 50)
    main()